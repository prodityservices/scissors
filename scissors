#!/usr/bin/env bash

# resolve shell-specifics
case "$(echo "$SHELL" | sed -E 's|/usr(/local)?||g')" in
    "/bin/zsh")
        RCPATH="$HOME/.zshrc"
        SOURCE="${BASH_SOURCE[0]:-${(%):-%N}}"
    ;;
    *)
        RCPATH="$HOME/.bashrc"
        if [[ -f "$HOME/.bash_aliases" ]]; then
            RCPATH="$HOME/.bash_aliases"
        fi
        SOURCE="${BASH_SOURCE[0]}"
    ;;
esac

# get base dir regardless of execution location
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SOURCE=$([[ "$SOURCE" = /* ]] && echo "$SOURCE" || echo "$PWD/${SOURCE#./}")
basedir=$(dirname "$SOURCE")
gitcmd="git -c commit.gpgsign=false"

failed=0
case "$1" in
    "rb" | "rbp" | "rebuild")
    (
        set -e
        cd "$basedir"
        scripts/rebuildPatches.sh "$basedir" || exit 1
    ) || failed=1
    ;;
    "p" | "patch")
    (
        set -e
        cd "$basedir"
        scripts/build.sh "$basedir" || exit 1
    ) || failed=1
    ;;
    "j" | "jar")
    (
        set -e
        cd "$basedir"
        scripts/build.sh "$basedir" "--jar" || exit 1
    ) || failed=1
    ;;
    "u" | "up" | "upstream")
    (
        cd "$basedir"
        scripts/upstreamMerge.sh "$basedir" "$2" || exit 1
    ) || failed=1
    ;;
    "r" | "root")
        cd "$basedir"
    ;;
    "a" | "api")
        cd "$basedir/Scissors-API"
    ;;
    "s" | "server")
        cd "$basedir/Scissors-Server"
    ;;
    "c" | "clean")
        echo "Cleaning build files..."
        rm -rf Scissors-API
        rm -rf Scissors-Server
		rm -rf Paper
        rm -rf work
        echo "Cleaned build files."
    ;;
    *)
        echo " "
        echo "Scissors build tool command. This provides a variety of commands to build and manage the Scissors build"
        echo "environment. For all of the functionality of this command to be available, you must first run the"
        echo "'setup' command. View below for details. For essential building and patching, you do not need to do the setup."
        echo ""
        echo " Normal commands:"
        echo "  * rb, rebuild       | Rebuild patches, can be called from anywhere."
        echo "  * p, patch          | Apply all patches to the project without building it. Can be run from anywhere."
        echo "  * j, jar            | Apply all patches and build the project, scissors.jar will be output. Can be run from anywhere."
        echo "  * u, up, upstream   | Updates the submodules used by Scissors to their latest upstream versions."
        echo ""
        echo " These commands require the setup command before use:"
        echo "  * r, root           | Change directory to the root of the project."
        echo "  * a. api            | Move to the Scissors-API directory."
        echo "  * s, server         | Move to the Scissors-Server directory."
        echo "  * c, clean          | Deletes all build files and directories."
        echo " "
    ;;
esac

unset RCPATH
unset SOURCE
unset basedir

if [ "$failed" == "1" ]; then
	unset failed
	false
else
	unset failed
	true
fi 